


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     ece353_hw2.s
    2 00000000         ; Author:       ece353 staff 
    3 00000000         ; Description:  
    4 00000000         
    5 00000000                 export           TEAM
    6 00000000                 export           PERSON1
    7 00000000                 export           PERSON2
    8 00000000                 export           str_emphasize
    9 00000000         
   10 00000000                 export           str_length
   11 00000000         
   12 00000000                 export           str_copy
   13 00000000                 export           str_compare
   14 00000000                 export           str_to_upper
   15 00000000                 export           str_fill
   16 00000000         
   17 00000000                 export           str_icompare
   18 00000000         
   19 00000000         ;**********************************************
   20 00000000         ; SRAM
   21 00000000         ;**********************************************
   22 00000000                 AREA             SRAM, READWRITE
   23 00000000                 align
   24 00000000         
   25 00000000         ;**********************************************
   26 00000000         ; Constant Variables (FLASH) Segment
   27 00000000         ;**********************************************
   28 00000000                 AREA             FLASH, CODE, READONLY
   29 00000000 54 65 61 
              6D 31 38 TEAM    DCB              "Team18"
   30 00000006 00              DCB              0
   31 00000007 52 79 61 
              6E 20 42 
              61 6D 62 
              72 6F 75 
              67 68    PERSON1 DCB              "Ryan Bambrough"
   32 00000015 00              DCB              0
   33 00000016 4E 69 63 
              68 6F 6C 
              61 73 20 
              41 64 61 
              6D 73    PERSON2 DCB              "Nicholas Adams"
   34 00000024 00              DCB              0
   35 00000025 00 00 00        align
   36 00000028         
   37 00000028         ;**********************************************
   38 00000028         ; Code (FLASH) Segment
   39 00000028         ;**********************************************
   40 00000028         
   41 00000028         
   42 00000028         ;*******************************************************
                       **********************
   43 00000028         ; str_length
   44 00000028         ;
   45 00000028         ; Description: Returns the length of a null terminated s
                       tring.  
   46 00000028         ;
   47 00000028         ; Parameters
   48 00000028         ;    R0                : The address of the string being



ARM Macro Assembler    Page 2 


                        examined
   49 00000028         ;
   50 00000028         ; Return values:     Description
   51 00000028         ; R15
   52 00000028         ;  -1                         : NULL pointer passed in
   53 00000028         ;  -2                         : max. string length excee
                       ded
   54 00000028         ;  string length              : String length (max 1024)
                       
   55 00000028         ; 
   56 00000028         ; C Prototype
   57 00000028         ;     int32_t str_length(char *string)
   58 00000028         ;*******************************************************
                       **********************
   59 00000028         
   60 00000028         ;R0 = I/O
   61 00000028         ;R1 = Counter
   62 00000028         ;R2 = Cur Value
   63 00000028         
   64 00000028         str_length
                               PROC
   65 00000028 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
   66 0000002A BF08 F04F 
              30FF             MOVEQ            R0, #-1
   67 00000030 D00F            BEQ              Ret_l
   68 00000032 F04F 0100       MOV              R1, #0
   69 00000036         While_l                              ; While Loaded Valu
                                                            e != 0
   70 00000036 5C42            LDRB             R2, [R0, R1]
   71 00000038 F101 0101       ADD              R1, R1, #1  ; Update total leng
                                                            th
   72 0000003C         
   73 0000003C F5B1 6F80       CMP              R1, #1024   ; Return -2 if > 10
                                                            24
   74 00000040 BFC8 F06F 
              0001             MOVGT            R0, #-2
   75 00000046 D004            BEQ              Ret_l
   76 00000048         
   77 00000048 2A00            CMP              R2, #0      ; At end of string?
                                                            
   78 0000004A BF08 4608       MOVEQ            R0, R1      ; Move length to re
                                                            turn reg
   79 0000004E D000            BEQ              Ret_l
   80 00000050 E7F1            B                While_l
   81 00000052         
   82 00000052         Ret_l
   83 00000052 4770            BX               LR
   84 00000054                 ENDP
   85 00000054         
   86 00000054         ;**********************************************
   87 00000054         ; str_copy
   88 00000054         ;
   89 00000054         ; Description: Copies a string from the src address to t
                       he dest.  
   90 00000054         ;
   91 00000054         ;    Parameters
   92 00000054         ;    R0                : The address where the string wi
                       ll be copied from



ARM Macro Assembler    Page 3 


   93 00000054         ;    R1                : The address where the string wi
                       ll be copied to
   94 00000054         ;    R2                : length of the string (max 1024)
                       
   95 00000054         ;
   96 00000054         ; Return values:      Description
   97 00000054         ; R0
   98 00000054         ;  -1                        : Invalid address for src o
                       r dest
   99 00000054         ;  -2                        : max. string length exceed
                       ed
  100 00000054         ;   0                        : Success
  101 00000054         ;
  102 00000054         ; C Prototype
  103 00000054         ;     int32_t str_copy(char *src, char *dest, uint16_t s
                       ize)
  104 00000054         ;**********************************************
  105 00000054         
  106 00000054         ;R0 = From
  107 00000054         ;R1 = To
  108 00000054         ;R2 = Remaining
  109 00000054         ;R3 = Temporary Storage
  110 00000054         
  111 00000054         str_copy
                               PROC
  112 00000054 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
  113 00000056 BF08 F04F 
              30FF             MOVEQ            R0, #-1
  114 0000005C D012            BEQ              Ret_c
  115 0000005E         
  116 0000005E 2900            CMP              R1, #0      ; Tests if NULL ptr
                                                            
  117 00000060 BF08 F04F 
              30FF             MOVEQ            R0, #-1
  118 00000066 D00D            BEQ              Ret_c
  119 00000068         
  120 00000068 F5B2 6F80       CMP              R2, #1024   ; Check for max len
                                                            gth
  121 0000006C BFC8 F06F 
              0001             MOVGT            R0, #-2
  122 00000072 DC07            BGT              Ret_c
  123 00000074         
  124 00000074         For_c                                ; For <length, leng
                                                            th --
  125 00000074 5C83            LDRB             R3, [R0, R2] ; Moving backwards
                                                            
  126 00000076 548B            STRB             R3, [R1, R2]
  127 00000078         
  128 00000078 F1A2 0201       SUB              R2, R2, #1
  129 0000007C 2A00            CMP              R2, #0      ; Check if at start
                                                             of string
  130 0000007E DAF9            BGE              For_c
  131 00000080 F04F 0000       MOV              R0, #0
  132 00000084         
  133 00000084         Ret_c
  134 00000084 4770            BX               LR
  135 00000086                 ENDP
  136 00000086         



ARM Macro Assembler    Page 4 


  137 00000086         ;*******************************************************
                       **********************
  138 00000086         ; str_compare
  139 00000086         ;
  140 00000086         ; Description: Compares to see if two strings are identi
                       cal.  
  141 00000086         ;
  142 00000086         ; Parameters
  143 00000086         ;   R0             : The address of the 1st string
  144 00000086         ;   R1            : The address of the 2nd string
  145 00000086         ;   R2             : length of the string (max 1024)
  146 00000086         ;
  147 00000086         ; Return values:     Description
  148 00000086         ;  -1                          : Invalid address for src
                        or dest
  149 00000086         ;  -2                          : max. string length exce
                       eded
  150 00000086         ;   0                          : match
  151 00000086         ;   1                          : does not match
  152 00000086         ;
  153 00000086         ; C Prototype
  154 00000086         ;    int32_t str_compare(char *str_A, char *str_B, uint1
                       6_t size)
  155 00000086         ;*******************************************************
                       **********************
  156 00000086         
  157 00000086         ;R0 = With
  158 00000086         ;R1 = What
  159 00000086         ;R2 = Length
  160 00000086         ;R3 = Stor1
  161 00000086         ;R4 = Stor2
  162 00000086         
  163 00000086         str_compare
                               PROC
  164 00000086 B410            PUSH             {R4}
  165 00000088         
  166 00000088 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
  167 0000008A BF08 F04F 
              30FF             MOVEQ            R0, #-1
  168 00000090 D019            BEQ              Ret_cmp
  169 00000092         
  170 00000092 2900            CMP              R1, #0      ; Tests if NULL ptr
                                                            
  171 00000094 BF08 F04F 
              30FF             MOVEQ            R0, #-1
  172 0000009A D014            BEQ              Ret_cmp
  173 0000009C         
  174 0000009C F5B2 6F80       CMP              R2, #1024   ; Check for max len
                                                            gth
  175 000000A0 BFC8 F06F 
              0001             MOVGT            R0, #-2
  176 000000A6 DC0E            BGT              Ret_cmp
  177 000000A8         
  178 000000A8 F1A2 0201       SUB              R2, R2, #1
  179 000000AC         For_cmp
  180 000000AC 5C83            LDRB             R3, [R0, R2] ; Load characters
  181 000000AE 5C8C            LDRB             R4, [R1, R2]
  182 000000B0         



ARM Macro Assembler    Page 5 


  183 000000B0 F1A2 0201       SUB              R2, R2, #1  ; decrement size
  184 000000B4 42A3            CMP              R3, R4      ; Return 1 if !=
  185 000000B6 D104            BNE              Fin_cmp
  186 000000B8         
  187 000000B8 2A00            CMP              R2, #0      ; Return match
  188 000000BA BF08 2000       MOVEQ            R0, #0
  189 000000BE D002            BEQ              Ret_cmp
  190 000000C0 E7F4            B                For_cmp
  191 000000C2         Fin_cmp
  192 000000C2 F04F 0001       MOV              R0, #1      ; Return not match
  193 000000C6         
  194 000000C6         Ret_cmp
  195 000000C6 BC10            POP              {R4}
  196 000000C8 4770            BX               LR
  197 000000CA                 ENDP
  198 000000CA         
  199 000000CA         
  200 000000CA         ;*******************************************************
                       **********************
  201 000000CA         ; str_icompare
  202 000000CA         ;
  203 000000CA         ; Description: Compares to see if two strings contain th
                       e same letters.  
  204 000000CA         ;
  205 000000CA         ; Parameters
  206 000000CA         ;   R0             : The address of the 1st string
  207 000000CA         ;   R1            : The address of the 2nd string
  208 000000CA         ;   R2             : length of the string (max 1024)
  209 000000CA         ;
  210 000000CA         ; Return values:     Description
  211 000000CA         ;  -1                          : Invalid address for src
                        or dest
  212 000000CA         ;  -2                          : max. string length exce
                       eded
  213 000000CA         ;   0                          : match
  214 000000CA         ;   1                          : does not match
  215 000000CA         ;
  216 000000CA         ; C Prototype
  217 000000CA         ;    int32_t str_icompare(char *str_A, char *str_B, uint
                       16_t size)
  218 000000CA         ;*******************************************************
                       **********************
  219 000000CA         ;R0 = With
  220 000000CA         ;R1 = What
  221 000000CA         ;R2 = Length
  222 000000CA         ;R3 = Stor1
  223 000000CA         ;R4 = Stor2
  224 000000CA         ;R5 = tmp
  225 000000CA         
  226 000000CA         str_icompare
                               PROC
  227 000000CA B410            PUSH             {R4}
  228 000000CC         
  229 000000CC 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
  230 000000CE BF08 F04F 
              30FF             MOVEQ            R0, #-1
  231 000000D4 D034            BEQ              Ret_icmp
  232 000000D6         



ARM Macro Assembler    Page 6 


  233 000000D6 2900            CMP              R1, #0      ; Tests if NULL ptr
                                                            
  234 000000D8 BF08 F04F 
              30FF             MOVEQ            R0, #-1
  235 000000DE D02F            BEQ              Ret_icmp
  236 000000E0         
  237 000000E0 F5B2 6F80       CMP              R2, #1024   ; Check for max len
                                                            gth
  238 000000E4 BFC8 F06F 
              0001             MOVGT            R0, #-2
  239 000000EA DC29            BGT              Ret_icmp
  240 000000EC         
  241 000000EC F1A2 0201       SUB              R2, R2, #1
  242 000000F0         For_icmp
  243 000000F0 5C83            LDRB             R3, [R0, R2] ; Load characters
  244 000000F2 5C8C            LDRB             R4, [R1, R2]
  245 000000F4 F1A2 0201       SUB              R2, R2, #1  ; decrement size
  246 000000F8         
  247 000000F8 42A3            CMP              R3, R4      ; Purely Equal
  248 000000FA D01A            BEQ              equal
  249 000000FC         
  250 000000FC 2B41            CMP              R3, #65     ; this is a letter?
                                                            
  251 000000FE DB1D            BLT              Fin_icmp
  252 00000100 2B7A            CMP              R3, #122
  253 00000102 DC1B            BGT              Fin_icmp
  254 00000104         
  255 00000104 2B5A            CMP              R3, #90
  256 00000106 DD02            BLE              next_char
  257 00000108 2B61            CMP              R3, #97
  258 0000010A DA00            BGE              next_char
  259 0000010C E016            B                Fin_icmp
  260 0000010E         
  261 0000010E         next_char
  262 0000010E 2C41            CMP              R4, #65     ; this the next a l
                                                            etter?
  263 00000110 DB14            BLT              Fin_icmp
  264 00000112 2C7A            CMP              R4, #122
  265 00000114 DC12            BGT              Fin_icmp
  266 00000116         
  267 00000116 2C5A            CMP              R4, #90
  268 00000118 DD02            BLE              test_char
  269 0000011A 2C61            CMP              R4, #97
  270 0000011C DA00            BGE              test_char
  271 0000011E E00D            B                Fin_icmp
  272 00000120         
  273 00000120         test_char
  274 00000120 F104 0420       ADD              R4, R4, #32 ;Check if capital o
                                                            r non-capital
  275 00000124 42A3            CMP              R3, R4
  276 00000126 D004            BEQ              equal
  277 00000128         
  278 00000128 F1A4 0440       SUB              R4, R4, #64 ;Check if capital o
                                                            r non-capital
  279 0000012C 42A3            CMP              R3, R4
  280 0000012E D000            BEQ              equal
  281 00000130         
  282 00000130 E004            B                Fin_icmp
  283 00000132         



ARM Macro Assembler    Page 7 


  284 00000132         equal
  285 00000132 2A00            CMP              R2, #0      ; Return match
  286 00000134 BF08 2000       MOVEQ            R0, #0
  287 00000138 D002            BEQ              Ret_icmp
  288 0000013A E7D9            B                For_icmp
  289 0000013C         Fin_icmp
  290 0000013C F04F 0001       MOV              R0, #1      ; Return not match
  291 00000140         
  292 00000140         Ret_icmp
  293 00000140 BC10            POP              {R4}
  294 00000142 4770            BX               LR
  295 00000144                 ENDP
  296 00000144         
  297 00000144         ;*******************************************************
                       **********************
  298 00000144         ; str_to_upper
  299 00000144         ;
  300 00000144         ; Description: All alphabetic characters are converted t
                       o upper case.
  301 00000144         ;
  302 00000144         ; Parameters
  303 00000144         ;  1st Param                    : Address of string bein
                       g converted to upper case
  304 00000144         ;  2nd Param                    : length of the string (
                       max 1024)
  305 00000144         ;
  306 00000144         ; Return values:    Description
  307 00000144         ;  -1                           : Invalid address for sr
                       c or dest
  308 00000144         ;  -2                           : max. string length exc
                       eeded
  309 00000144         ;   0                           : success
  310 00000144         ; C Prototype
  311 00000144         ; int32_t str_to_upper(char *str, uint16_t size)
  312 00000144         ;*******************************************************
                       **********************
  313 00000144         
  314 00000144         ; R0 String
  315 00000144         ; R1 Length
  316 00000144         ; R2 character
  317 00000144         
  318 00000144         str_to_upper
                               PROC
  319 00000144 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
  320 00000146 BF08 F04F 
              30FF             MOVEQ            R0, #-1
  321 0000014C D01B            BEQ              Ret_up
  322 0000014E         
  323 0000014E F5B1 6F80       CMP              R1, #1024   ; Check for max len
                                                            gth
  324 00000152 BFC8 F06F 
              0001             MOVGT            R0, #-2
  325 00000158 DC15            BGT              Ret_up
  326 0000015A         
  327 0000015A F1A1 0101       SUB              R1, R1, #1  ; Don't touch \0
  328 0000015E         For_up
  329 0000015E 5C42            LDRB             R2, [R0, R1] ; Load character
  330 00000160 F1A1 0101       SUB              R1, R1, #1



ARM Macro Assembler    Page 8 


  331 00000164         
  332 00000164 F1B1 3FFF       CMP              R1, #-1     ; Return 0 if at st
                                                            art of string
  333 00000168 BFB8 2000       MOVLT            R0, #0
  334 0000016C DB0B            BLT              Ret_up
  335 0000016E         
  336 0000016E 2A61            CMP              R2, #97     ; Is this a lowerca
                                                            se letter?
  337 00000170 DBF5            BLT              For_up
  338 00000172 2A7A            CMP              R2, #122
  339 00000174 DCF3            BGT              For_up
  340 00000176         
  341 00000176 F1A2 0220       SUB              R2, R2, #32 ;Change to uppercas
                                                            e
  342 0000017A F101 0101       ADD              R1, R1, #1
  343 0000017E 5442            STRB             R2, [R0, R1]
  344 00000180 F1A1 0101       SUB              R1, R1, #1
  345 00000184 E7EB            B                For_up
  346 00000186         
  347 00000186         Ret_up
  348 00000186 4770            BX               LR
  349 00000188                 ENDP
  350 00000188         
  351 00000188         ;*******************************************************
                       **********************
  352 00000188         ; str_fill
  353 00000188         ;
  354 00000188         ; Description: Fills an entire string with a given value
                       
  355 00000188         ;
  356 00000188         ; Parameters
  357 00000188         ;  1st Param                : The address of the string 
                       
  358 00000188         ;  2nd Param                : value to write into the st
                       ring
  359 00000188         ;  3rd Param                : length of the string (max 
                       of 1024)
  360 00000188         ;
  361 00000188         ; Return values:             Description
  362 00000188         ;  -1                        : Invalid address for src o
                       r dest
  363 00000188         ;  -2                        : max. string length exceed
                       ed
  364 00000188         ;   0                        : success
  365 00000188         ;
  366 00000188         ; C Prototpye
  367 00000188         ;    int32_t str_fill(char *str, char value, uint16_t si
                       ze)
  368 00000188         ;*******************************************************
                       **********************
  369 00000188         ; R0 String
  370 00000188         ; R1 character
  371 00000188         ; R2 Length
  372 00000188         
  373 00000188         str_fill
                               PROC
  374 00000188 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
  375 0000018A BF08 F04F 



ARM Macro Assembler    Page 9 


              30FF             MOVEQ            R0, #-1
  376 00000190 D00F            BEQ              Ret_f
  377 00000192         
  378 00000192 F5B2 6F80       CMP              R2, #1024   ; Check for max len
                                                            gth
  379 00000196 BFC8 F06F 
              0001             MOVGT            R0, #-2
  380 0000019C DC09            BGT              Ret_f
  381 0000019E         
  382 0000019E F1A2 0201       SUB              R2, R2, #1  ; Don't touch \0
  383 000001A2         For_f
  384 000001A2 F1A2 0201       SUB              R2, R2, #1
  385 000001A6         
  386 000001A6 2A00            CMP              R2, #0      ; Return 0 if at st
                                                            art of string
  387 000001A8 BFB8 2000       MOVLT            R0, #0
  388 000001AC DB01            BLT              Ret_f
  389 000001AE         
  390 000001AE 5481            STRB             R1, [R0, R2]
  391 000001B0 E7F7            B                For_f
  392 000001B2         
  393 000001B2         Ret_f
  394 000001B2 4770            BX               LR
  395 000001B4                 ENDP
  396 000001B4         
  397 000001B4         ;*******************************************************
                       **********************
  398 000001B4         ; str_emphasize
  399 000001B4         ;
  400 000001B4         ; Description: Performs a case insensitive search for a 
                       substring in text.  
  401 000001B4         ; Any substrings that will be found will be converted to
                        UPPERCASE.  The 
  402 000001B4         ; function will return how many occurrances of the subst
                       ring were found
  403 000001B4         ;
  404 000001B4         ;    Parameters
  405 000001B4         ;    1st Param           : The address of the text strin
                       g that will be searched.  
  406 000001B4         ;                        : The maximum length of this st
                       ring is 1024 characters
  407 000001B4         ;
  408 000001B4         ;  2nd Param           : The address of the sub-string i
                       n 'text' that will be 
  409 000001B4         ;                        : emphasized.  The maximum leng
                       th of the search text is
  410 000001B4         ;                        : 1024 characters.
  411 000001B4         ;
  412 000001B4         ; Return values:
  413 000001B4         ;  -1                        : Invalid address for src o
                       r dest
  414 000001B4         ;  -2                        : max. string length exceed
                       ed
  415 000001B4         ;                            : The function will return 
                       how many occurrances of the 
  416 000001B4         ;                            : substring were found
  417 000001B4         ; C Prototype
  418 000001B4         ;    int32_t str_emphasize(char *text, char *search)
  419 000001B4         ;*******************************************************



ARM Macro Assembler    Page 10 


                       **********************
  420 000001B4         ; R0 - string to be searched
  421 000001B4         ; R1 - search term
  422 000001B4         ; R2 - length of term
  423 000001B4         ; R3 - length of string
  424 000001B4         ; R4 - index of search string current char
  425 000001B4         ; R5 - R0 base
  426 000001B4         ; R6 - current char of search string
  427 000001B4         ; R7 - current char of search search term
  428 000001B4         ; R8 - Counter
  429 000001B4         ; R9 - tmp
  430 000001B4         ; R10 - tmp
  431 000001B4         
  432 000001B4         str_emphasize
                               PROC
  433 000001B4 E92D 47F0       PUSH             {R4-R10, R14}
  434 000001B8 2800            CMP              R0, #0      ; Tests if NULL ptr
                                                            
  435 000001BA BF08 F04F 
              30FF             MOVEQ            R0, #-1
  436 000001C0 D044            BEQ              Ret_emp
  437 000001C2         
  438 000001C2 2900            CMP              R1, #0      ; Tests if NULL ptr
                                                            
  439 000001C4 BF08 F04F 
              30FF             MOVEQ            R0, #-1
  440 000001CA D03F            BEQ              Ret_emp
  441 000001CC         
  442 000001CC 4682            MOV              R10, R0     ; Test if search st
                                                            ring is too long
  443 000001CE B40E            PUSH             {R1-R3}
  444 000001D0 F7FF FFFE       BL               str_length
  445 000001D4 BC0E            POP              {R1-R3}
  446 000001D6 2800            CMP              R0, #0
  447 000001D8 DB38            BLT              Ret_emp
  448 000001DA 4603            MOV              R3, R0
  449 000001DC         
  450 000001DC 4608            MOV              R0, R1      ; Test if search te
                                                            rm is too long
  451 000001DE B40E            PUSH             {R1-R3}
  452 000001E0 F7FF FFFE       BL               str_length
  453 000001E4 BC0E            POP              {R1-R3}
  454 000001E6 2800            CMP              R0, #0
  455 000001E8 DB30            BLT              Ret_emp
  456 000001EA 4602            MOV              R2, R0
  457 000001EC         
  458 000001EC 4650            MOV              R0, R10     ; Return R0
  459 000001EE         
  460 000001EE 429A            CMP              R2, R3      ; Give up if term >
                                                             string
  461 000001F0 BFC8 2000       MOVGT            R0, #0
  462 000001F4 DC2A            BGT              Ret_emp
  463 000001F6         
  464 000001F6 F1A2 0201       SUB              R2, R2, #1  ; Don't compare \0
  465 000001FA F1A3 0301       SUB              R3, R3, #1  ; Don't compare \0
  466 000001FE         
  467 000001FE F04F 0400       MOV              R4, #0      ; Setting up loop p
                                                            aramters
  468 00000202 4605            MOV              R5, R0



ARM Macro Assembler    Page 11 


  469 00000204 F04F 0800       MOV              R8, #0
  470 00000208         
  471 00000208         ; LOOP
  472 00000208         ; Chuckin' Method
  473 00000208         For_emp
  474 00000208 EBA3 0902       SUB              R9, R3, R2  ;Check if if loop d
                                                            one
  475 0000020C EBA9 0904       SUB              R9, R9, R4
  476 00000210 F1B9 0F00       CMP              R9, #0
  477 00000214 DB19            BLT              Fin_emp
  478 00000216         
  479 00000216 EB05 0004       ADD              R0, R5, R4  ;Setup icompare
  480 0000021A 4691            MOV              R9, R2
  481 0000021C B40E            PUSH             {R1-R3}
  482 0000021E F7FF FFFE       BL               str_icompare ;Check window with
                                                             match string
  483 00000222 BC0E            POP              {R1-R3}
  484 00000224 464A            MOV              R2, R9
  485 00000226         
  486 00000226 2801            CMP              R0, #1      ;If not equal loop
  487 00000228 BF08 1C64       ADDEQ            R4, R4, #1
  488 0000022C D0EC            BEQ              For_emp
  489 0000022E         
  490 0000022E F108 0801       ADD              R8, R8, #1  ;Increment count
  491 00000232         
  492 00000232 EB05 0004       ADD              R0, R5, R4  ;Change window to a
                                                            ll uppercase
  493 00000236 4689            MOV              R9, R1
  494 00000238 4611            MOV              R1, R2
  495 0000023A B40E            PUSH             {R1-R3}
  496 0000023C F7FF FFFE       BL               str_to_upper
  497 00000240 BC0E            POP              {R1-R3}
  498 00000242 4649            MOV              R1, R9
  499 00000244         
  500 00000244 F104 0401       ADD              R4, R4, #1  ;Move window
  501 00000248 E7DE            B                For_emp
  502 0000024A         Fin_emp
  503 0000024A 4640            MOV              R0, R8
  504 0000024C         
  505 0000024C         Ret_emp
  506 0000024C E8BD 47F0       POP              {R4-R10, R14}
  507 00000250 4770            BX               LR
  508 00000252                 ENDP
  509 00000252         
  510 00000252 00 00           align
  511 00000254         
  512 00000254                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\ece353_hw2.d -o.\obj\ece353_hw2.o -II:\College\ECE_353\HW2\RTE -IC:\AppV\mdk_5
10\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\AppV\mdk_510\ARM\PACK\Keil\TM4C_
DFP\1.0.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__MIC
ROLIB SETA 1" --list=.\lst\ece353_hw2.lst ece353_hw2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 22 in file ece353_hw2.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 28 in file ece353_hw2.s
   Uses
      None
Comment: FLASH unused
Fin_cmp 000000C2

Symbol: Fin_cmp
   Definitions
      At line 191 in file ece353_hw2.s
   Uses
      At line 185 in file ece353_hw2.s
Comment: Fin_cmp used once
Fin_emp 0000024A

Symbol: Fin_emp
   Definitions
      At line 502 in file ece353_hw2.s
   Uses
      At line 477 in file ece353_hw2.s
Comment: Fin_emp used once
Fin_icmp 0000013C

Symbol: Fin_icmp
   Definitions
      At line 289 in file ece353_hw2.s
   Uses
      At line 251 in file ece353_hw2.s
      At line 253 in file ece353_hw2.s
      At line 259 in file ece353_hw2.s
      At line 263 in file ece353_hw2.s
      At line 265 in file ece353_hw2.s
      At line 271 in file ece353_hw2.s
      At line 282 in file ece353_hw2.s

For_c 00000074

Symbol: For_c
   Definitions
      At line 124 in file ece353_hw2.s
   Uses
      At line 130 in file ece353_hw2.s
Comment: For_c used once
For_cmp 000000AC

Symbol: For_cmp
   Definitions
      At line 179 in file ece353_hw2.s
   Uses
      At line 190 in file ece353_hw2.s
Comment: For_cmp used once
For_emp 00000208

Symbol: For_emp
   Definitions
      At line 473 in file ece353_hw2.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 488 in file ece353_hw2.s
      At line 501 in file ece353_hw2.s

For_f 000001A2

Symbol: For_f
   Definitions
      At line 383 in file ece353_hw2.s
   Uses
      At line 391 in file ece353_hw2.s
Comment: For_f used once
For_icmp 000000F0

Symbol: For_icmp
   Definitions
      At line 242 in file ece353_hw2.s
   Uses
      At line 288 in file ece353_hw2.s
Comment: For_icmp used once
For_up 0000015E

Symbol: For_up
   Definitions
      At line 328 in file ece353_hw2.s
   Uses
      At line 337 in file ece353_hw2.s
      At line 339 in file ece353_hw2.s
      At line 345 in file ece353_hw2.s

PERSON1 00000007

Symbol: PERSON1
   Definitions
      At line 31 in file ece353_hw2.s
   Uses
      At line 6 in file ece353_hw2.s
Comment: PERSON1 used once
PERSON2 00000016

Symbol: PERSON2
   Definitions
      At line 33 in file ece353_hw2.s
   Uses
      At line 7 in file ece353_hw2.s
Comment: PERSON2 used once
Ret_c 00000084

Symbol: Ret_c
   Definitions
      At line 133 in file ece353_hw2.s
   Uses
      At line 114 in file ece353_hw2.s
      At line 118 in file ece353_hw2.s
      At line 122 in file ece353_hw2.s

Ret_cmp 000000C6

Symbol: Ret_cmp



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 194 in file ece353_hw2.s
   Uses
      At line 168 in file ece353_hw2.s
      At line 172 in file ece353_hw2.s
      At line 176 in file ece353_hw2.s
      At line 189 in file ece353_hw2.s

Ret_emp 0000024C

Symbol: Ret_emp
   Definitions
      At line 505 in file ece353_hw2.s
   Uses
      At line 436 in file ece353_hw2.s
      At line 440 in file ece353_hw2.s
      At line 447 in file ece353_hw2.s
      At line 455 in file ece353_hw2.s
      At line 462 in file ece353_hw2.s

Ret_f 000001B2

Symbol: Ret_f
   Definitions
      At line 393 in file ece353_hw2.s
   Uses
      At line 376 in file ece353_hw2.s
      At line 380 in file ece353_hw2.s
      At line 388 in file ece353_hw2.s

Ret_icmp 00000140

Symbol: Ret_icmp
   Definitions
      At line 292 in file ece353_hw2.s
   Uses
      At line 231 in file ece353_hw2.s
      At line 235 in file ece353_hw2.s
      At line 239 in file ece353_hw2.s
      At line 287 in file ece353_hw2.s

Ret_l 00000052

Symbol: Ret_l
   Definitions
      At line 82 in file ece353_hw2.s
   Uses
      At line 67 in file ece353_hw2.s
      At line 75 in file ece353_hw2.s
      At line 79 in file ece353_hw2.s

Ret_up 00000186

Symbol: Ret_up
   Definitions
      At line 347 in file ece353_hw2.s
   Uses
      At line 321 in file ece353_hw2.s
      At line 325 in file ece353_hw2.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 334 in file ece353_hw2.s

TEAM 00000000

Symbol: TEAM
   Definitions
      At line 29 in file ece353_hw2.s
   Uses
      At line 5 in file ece353_hw2.s
Comment: TEAM used once
While_l 00000036

Symbol: While_l
   Definitions
      At line 69 in file ece353_hw2.s
   Uses
      At line 80 in file ece353_hw2.s
Comment: While_l used once
equal 00000132

Symbol: equal
   Definitions
      At line 284 in file ece353_hw2.s
   Uses
      At line 248 in file ece353_hw2.s
      At line 276 in file ece353_hw2.s
      At line 280 in file ece353_hw2.s

next_char 0000010E

Symbol: next_char
   Definitions
      At line 261 in file ece353_hw2.s
   Uses
      At line 256 in file ece353_hw2.s
      At line 258 in file ece353_hw2.s

str_compare 00000086

Symbol: str_compare
   Definitions
      At line 163 in file ece353_hw2.s
   Uses
      At line 13 in file ece353_hw2.s
Comment: str_compare used once
str_copy 00000054

Symbol: str_copy
   Definitions
      At line 111 in file ece353_hw2.s
   Uses
      At line 12 in file ece353_hw2.s
Comment: str_copy used once
str_emphasize 000001B4

Symbol: str_emphasize
   Definitions
      At line 432 in file ece353_hw2.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 8 in file ece353_hw2.s
Comment: str_emphasize used once
str_fill 00000188

Symbol: str_fill
   Definitions
      At line 373 in file ece353_hw2.s
   Uses
      At line 15 in file ece353_hw2.s
Comment: str_fill used once
str_icompare 000000CA

Symbol: str_icompare
   Definitions
      At line 226 in file ece353_hw2.s
   Uses
      At line 17 in file ece353_hw2.s
      At line 482 in file ece353_hw2.s

str_length 00000028

Symbol: str_length
   Definitions
      At line 64 in file ece353_hw2.s
   Uses
      At line 10 in file ece353_hw2.s
      At line 444 in file ece353_hw2.s
      At line 452 in file ece353_hw2.s

str_to_upper 00000144

Symbol: str_to_upper
   Definitions
      At line 318 in file ece353_hw2.s
   Uses
      At line 14 in file ece353_hw2.s
      At line 496 in file ece353_hw2.s

test_char 00000120

Symbol: test_char
   Definitions
      At line 273 in file ece353_hw2.s
   Uses
      At line 268 in file ece353_hw2.s
      At line 270 in file ece353_hw2.s

31 symbols
365 symbols in table
